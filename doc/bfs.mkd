@@ BFS: Breadth First Search @@

Este algoritmo tiene la característica de que siempre expande nodos con la menor
profundidad posible. De esta manera, en caso de haber soluciones de poca profundidad,
puede resultar muy eficiente.

En nuestro caso, la profundidad de la solución se conoce de antemano, siendo
esta la cantidad de casillas libres. En un juego de buscaminas considerado "experto",
alrededor de un 80% de las casillas estaran libres, haciendo así que una estrategia
de tipo BFS inaccesible tanto por el uso de tiempo como de memoria: recorre
todos los estados posibles, es decir `2^(cantidad de casillas libres)`

En principio, basta para implementar una estrategia BFS una estructura `Queue`,
que representa perfectamente la necesidad de analizar primero los nodos de menor
profundidad, sin embargo, por razones de eficiencia hemos agregado un `HashSet` de estados
para poder validar con rapidez si los estados añadidos no fueron ya visitados. Tras hacer
varias pruebas hemos visto que el número de estado repetidos es muy grade, siendo varias
veces mayor que el número de nodos expandidos, por lo cual consideramos al `HashSet` una
gran mejora en el algoritmo. La función de hash utilizada, creada por nosotros, se
explica a continuación.

Se calcula un valor para cada casilla, dependiente de su posición y su estado. El hash de
un tablero sera la suma de estos valores para cada casilla, permitiendonos calcular rápido
el hash de estados 'hijos'.
